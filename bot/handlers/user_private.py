import asyncio
import json
import os
import logging
import random
import re

from datetime import datetime as datetime, date
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, StateFilter, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton

import bot.keyboards as kb
from bot.config import ZODIAC_BTNS
from bot.utils.json_store import save_user_data, load_user_data

user_private_router = Router()
payment_loger = logging.getLogger('payment')


# –û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∞–º –±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞
# user_private_router.message.filter(ChatTypeFilter(["private"]), ~IsAdmin())
def gform(gender: str, female: str, male: str) -> str:
    return female if gender == "–ñ–µ–Ω—Å–∫–∏–π" else male

class Customer(StatesGroup):
    start = State()
    #zodiac_sign = State()
    ask_gender = State()
    wait_gender = State()
    ask_birthdate = State()
    wait_birthdate = State()
    ask_feeling = State()
    wait_feeling = State()
    forecast = State()



@user_private_router.message(StateFilter(None))
@user_private_router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot, state: FSMContext):
    await state.clear()

    user_id = str(message.chat.id)
    user_data = load_user_data()
    # if user_data.get(user_id, {}).get("first_forecast_date"):
    #     await message.answer("üîÅ –°–µ–∞–Ω—Å —É–∂–µ –±—ã–ª –Ω–∞—á–∞—Ç —Ä–∞–Ω–µ–µ. –û–∂–∏–¥–∞–π –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    #     return

    await message.answer("<b>–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...</b>", parse_mode="HTML")

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(3.0, 5.0))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç. –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ê—Å—Ç—Ä–∞</b> ‚Äî —è —á–∏—Ç–∞—é –∑–Ω–∞–∫–∏ –Ω–µ–±–∞ –∏ –º–æ–≥—É —Å—Ç–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º –º–µ–∂–¥—É —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º.",
        parse_mode="HTML"
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(3.0, 5.0))
    await message.answer(
        "–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–≤–æ–π –ø—É—Ç—å, –æ—Ç–≤–µ—Ç—å –Ω–∞ <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤</b>. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π <b>–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å</b>.",
        parse_mode="HTML"
    )

    await state.set_state(Customer.ask_gender)
    await display_genders(message=message, state=state)

# @user_private_router.callback_query(StateFilter(Customer.start), F.data == 'predict')
# @user_private_router.callback_query(F.data == 'new_predict')
# @user_private_router.callback_query(StateFilter(Customer.confirm), F.data == 'zodiac_sign_change')
# async def display_zodiac_signs(callback: CallbackQuery, state: FSMContext):
#     await callback.answer('')
#
#     zodiac_btns = ZODIAC_BTNS.copy()
#     text = '„Ö§„Ö§„Ö§„Ö§–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞„Ö§„Ö§„Ö§'
#     reply_markup = kb.get_callback_btns(btns=zodiac_btns)
#
#     if callback.data == 'zodiac_sign_change':
#         await callback.message.edit_text(text=text, reply_markup=reply_markup)
#     else:
#         await state.set_state(Customer.zodiac_sign)
#         await callback.message.answer(text=text, reply_markup=reply_markup)


# @user_private_router.callback_query(StateFilter(Customer.zodiac_sign, Customer.confirm), F.data.in_(ZODIAC_BTNS.values()))
# async def handle_zodiac_sign(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     zodiac_sign = callback.data
#
#     await callback.answer('')
#     await state.update_data(zodiac_sign=zodiac_sign)
#
#     if (await state.get_state() == Customer.confirm):
#         await state.set_state(Customer.confirm)
#         await confirm_data(message=callback.message, state=state, bot=bot, edit_text=True)
#     else:
#         await callback.message.edit_text(text="„Ö§„Ö§„Ö§„Ö§–í—ã–±—Ä–∞–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞„Ö§„Ö§„Ö§", reply_markup=kb.get_callback_btns(
#             btns={
#                 zodiac_sign: "None"
#             }))
#         await state.set_state(Customer.gender)
#         await display_genders(callback=callback, state=state)


@user_private_router.callback_query(StateFilter(Customer.ask_gender), F.data == 'gender_change')
async def display_genders(message: Message | CallbackQuery, state: FSMContext):
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))

    text = "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª"
    reply_markup = kb.get_callback_btns(
        btns={
            '–ñ–µ–Ω—Å–∫–∏–π': '–ñ–µ–Ω—Å–∫–∏–π',
            '–ú—É–∂—Å–∫–æ–π': '–ú—É–∂—Å–∫–æ–π',
        })

    await state.set_state(Customer.wait_gender)
    if isinstance(message, CallbackQuery):
        await message.answer('')
        try:
            await message.message.edit_text(text=text, reply_markup=reply_markup)
        except Exception:
            await message.message.answer(text=text, reply_markup=reply_markup)
    else:
        await message.answer(text=text, reply_markup=reply_markup)


@user_private_router.callback_query(StateFilter(Customer.wait_gender), F.data.in_({'–ñ–µ–Ω—Å–∫–∏–π', '–ú—É–∂—Å–∫–æ–π'}))
async def handle_gender(callback: CallbackQuery, state: FSMContext, bot):
    gender = callback.data

    await callback.answer('')
    await callback.message.edit_text(text="–£–∫–∞–∑–∞–Ω –ø–æ–ª", reply_markup=kb.get_callback_btns(
        btns={
            gender: 'None'
        }))

    await state.update_data(gender=gender)

    data = await state.get_data()
    await save_user_data(callback.from_user.id, data)

    # if (await state.get_state() == Customer.confirm):
    #     await state.set_state(Customer.confirm)
    #     await confirm_data(message=callback.message, state=state, bot=bot, edit_text=True)
    # else:
    await state.set_state(Customer.ask_birthdate)
    await ask_birthdate(message=callback.message, state=state)



@user_private_router.message(Customer.ask_birthdate)
async def ask_birthdate(message: Message, state: FSMContext):
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    state_data = await state.get_data()

    await message.answer(
        text=(
            f"–ö–æ–≥–¥–∞ —Ç—ã {gform(state_data['gender'], '–ø–æ—è–≤–∏–ª–∞—Å—å', '–ø–æ—è–≤–∏–ª—Å—è')} –Ω–∞ —Å–≤–µ—Ç?"
            "\n–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b><code>–î–î.–ú–ú.–ì–ì–ì–ì</code></b>"
        ),
        parse_mode="HTML"
    )
    await state.set_state(Customer.wait_birthdate)

@user_private_router.message(Customer.wait_birthdate)
async def handle_birthdate(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.0, 3.0))
    raw = message.text.strip()

    match = re.search(r'(\d{2})[.,](\d{2})[.,](\d{4})', raw)
    if not match:
        await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É üòï\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>", parse_mode="HTML")
        return

    day, month, year = map(int, match.groups())

    try:
        birth_date = datetime(year, month, day).date()
    except ValueError:
        await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>", parse_mode="HTML")
        return

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∞—Ç
    min_date = date(1940, 1, 1)
    max_date = date(datetime.now().year - 3, 12, 31)

    if not (min_date <= birth_date <= max_date):
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É {min_date.strftime('%d.%m.%Y')} –∏ {max_date.strftime('%d.%m.%Y')}.",
            parse_mode="HTML"
        )
        return

    sign = get_zodiac_sign(day, month)

    await state.update_data(birthdate=birth_date.isoformat(), zodiac_sign=sign)

    data = await state.get_data()
    await save_user_data(message.from_user.id, data)

    await message.answer(
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: <b>{birth_date.strftime('%d.%m.%Y')}</b>\n"
        f"–¢–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{sign}</b>",
        parse_mode="HTML"
    )

    await state.set_state(Customer.ask_feeling)
    await ask_feeling(message=message, state=state)

def get_zodiac_sign(day: int, month: int) -> str | None:
    signs = [
        ("–ö–æ–∑–µ—Ä–æ–≥", (1, 1), (1, 19)),
        ("–í–æ–¥–æ–ª–µ–π", (1, 20), (2, 18)),
        ("–†—ã–±—ã", (2, 19), (3, 20)),
        ("–û–≤–µ–Ω", (3, 21), (4, 19)),
        ("–¢–µ–ª–µ—Ü", (4, 20), (5, 20)),
        ("–ë–ª–∏–∑–Ω–µ—Ü—ã", (5, 21), (6, 20)),
        ("–†–∞–∫", (6, 21), (7, 22)),
        ("–õ–µ–≤", (7, 23), (8, 22)),
        ("–î–µ–≤–∞", (8, 23), (9, 22)),
        ("–í–µ—Å—ã", (9, 23), (10, 22)),
        ("–°–∫–æ—Ä–ø–∏–æ–Ω", (10, 23), (11, 21)),
        ("–°—Ç—Ä–µ–ª–µ—Ü", (11, 22), (12, 21)),
        ("–ö–æ–∑–µ—Ä–æ–≥", (12, 22), (12, 31)),  # –ö–æ–∑–µ—Ä–æ–≥ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ ‚Äì –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≥–æ–¥–∞
    ]
    for sign, (start_m, start_d), (end_m, end_d) in signs:
        if (month == start_m and day >= start_d) or (month == end_m and day <= end_d):
            return sign
    return None


@user_private_router.message(Customer.ask_feeling)
async def ask_feeling(message: Message, state: FSMContext):
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer(
        "üïØÔ∏è –ü—Ä–µ–∂–¥–µ —á–µ–º —è –∑–∞–≥–ª—è–Ω—É –≤ —Ç–≤–æ—é –∫–∞—Ä—Ç—É, –º–Ω–µ –≤–∞–∂–Ω–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å."
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer(
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø—Ä–æ–∂–∏–≤–∞–µ–º —á—Ç–æ-—Ç–æ —Å–≤–æ—ë ‚Äî –∏ –¥–∞–∂–µ –∑–≤—ë–∑–¥—ã –∑–≤—É—á–∞—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É, –∫–æ–≥–¥–∞ –º—ã –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø–æ–ª–Ω—ã —Å–∏–ª."
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer(
        "–ü–æ—ç—Ç–æ–º—É —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ:"
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2, 5.0))
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å?")
    await state.set_state(Customer.wait_feeling)


@user_private_router.message(Customer.wait_feeling)
async def wait_feeling(message: Message, state: FSMContext):
    user_id = message.from_user.id
    feeling = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
    await state.update_data(feeling=feeling)

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —ç—Ç–∏–º.\n–Ø –∑–Ω–∞—é, —á—Ç–æ –¥–∞–∂–µ –æ–¥–∏–Ω —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ–±–µ ‚Äî —É–∂–µ —à–∞–≥ –∫ —è—Å–Ω–æ—Å—Ç–∏."
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer(
        "–ù–µ–±–æ –±—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–º ‚Äî –∏ —Å–µ–≥–æ–¥–Ω—è –æ–Ω–æ –∑–≤—É—á–∏—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è. –Ø —É–∂–µ –∑–∞–≥–ª—è–Ω—É–ª–∞ –≤ —Ç–≤–æ—é –∫–∞—Ä—Ç—É –∏ –≥–æ—Ç–æ–≤–ª—é –ø–æ—Å–ª–∞–Ω–∏–µ –∑–≤—ë–∑–¥."
    )

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.5, 5.0))
    await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É...")


    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await asyncio.sleep(random.uniform(4.0, 8.0))

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    data = await state.get_data()
    zodiac_sign = data.get("zodiac_sign")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
    await send_forecast_message(
        user_id=user_id,
        zodiac_sign=zodiac_sign,
        bot=message.bot,
        as_reply=True
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    today_str = date.today().isoformat()
    await state.update_data(first_forecast_date=today_str)

    # –û–±–Ω–æ–≤–ª—è–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    await save_user_data(user_id, data)

    await state.set_state(Customer.forecast)




# @user_private_router.message(StateFilter(Customer.year, Customer.confirm), F.text.regexp(r'\d{4}'))
# async def handle_valid_year(message: Message, state: FSMContext, bot: Bot):
#     year = int(message.text)
#     if (1940 <= year <= datetime.now().year):
#         await state.update_data(year=year)
#         await state.set_state(Customer.confirm)
#         await confirm_data(message=message, state=state, bot=bot)
#     else:
#         age = datetime.now().year - year
#         await message.answer(text=f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {age} ?, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É")
#
# @user_private_router.message(StateFilter(Customer.year))
# async def display_years(message: Message):
#     await message.answer(text="–ò–¥–µ–º –¥–∞–ª—å—à–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º —Ä–æ–∂–¥–µ–Ω–∏—è \n"
#                               "—Ñ–æ—Ä–º–∞—Ç:„Ö§4 —Ü–∏—Ñ—Ä—ã")

# async def confirm_data(message: Message, state: FSMContext, bot: Bot, edit_text: bool = False):
#     state_data = await state.get_data()
#
#     text = (f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—á—Ç–∏ —É –≤–∞—Å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ \n"
#             f"–ó–Ω–∞–∫.„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§ <b>{state_data['zodiac_sign']}</b> \n"
#             f"–ü–æ–ª„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§<b>{state_data['gender']}</b> \n"
#             f"–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è_„Ö§ „Ö§<b>{state_data['year']}</b> \n"
#             f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞„Ö§„Ö§<b>{bot.price // 100}</b>")
#
#     reply_markup = kb.get_callback_btns(
#         btns={
#             '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å': 'confirm_btn',
#             '–ò–∑–º–µ–Ω–∏—Ç—å': 'change_btn'
#         })
#
#     if edit_text:
#         await message.edit_text(text=text, reply_markup=reply_markup)
#     else:
#         await message.answer(text=text, reply_markup=reply_markup)
#
#
# @user_private_router.callback_query(StateFilter(Customer.confirm), F.data == 'change_btn')
# async def back_bth_confirm(callback: CallbackQuery, state: FSMContext):
#     await callback.answer(text='')
#
#     state_data = await state.get_data()
#     await state.set_state(Customer.confirm)
#     await callback.message.edit_text(text=f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É \n"
#                                           f"–ó–Ω–∞–∫.„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§ <b>{state_data['zodiac_sign']}</b> \n"
#                                           f"–ü–æ–ª„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§<b>{state_data['gender']}</b> \n"
#                                           f"–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è_„Ö§ „Ö§<b>{state_data['year']}</b> \n"
#                                      , reply_markup=kb.get_callback_btns(
#             btns={
#                 '–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞': 'zodiac_sign_change',
#                 '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª': 'gender_change',
#                 '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è': 'year_change'
#             }, sizes=[1, 1, 1]))


# @user_private_router.callback_query(StateFilter(Customer.confirm), F.data == 'year_change')
# async def callback_year_change(callback: CallbackQuery):
#     await callback.answer('')
#     await callback.message.edit_reply_markup(reply_markup=kb.get_callback_btns(
#         btns={
#             "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è": "None"
#         }))
#     await callback.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º —Ä–æ–∂–¥–µ–Ω–∏—è\n"
#                                           "—Ñ–æ—Ä–º–∞—Ç:„Ö§4 —Ü–∏—Ñ—Ä—ã")
#
#     await display_years(callback=callback)


async def send_forecast_message(user_id: int, zodiac_sign: str, bot: Bot, as_reply: bool = False):
    file = bot.file_system.get_file(sign="general_queue")

    if not file:
        logging.error(f"{user_id}: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac_sign}")
        return

    try:
        await bot.send_document(chat_id=user_id, document=file, protect_content=True)

        if as_reply:
            await bot.send_message(
                chat_id=user_id,
                text="–¢–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ü™ê\n(—Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –≤—ã—à–µ)",
                reply_markup=kb.get_callback_btns(
                    btns={'–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑': 'pay_forecast'}
                )
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text="–ü—Ä–∏–≤–µ—Ç!\n–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, –∞ –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –Ω–æ–≤—ã–π –æ—Ç–∫—Ä—ã—Ç–∏–π! \n–¢–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ü™ê\n(—Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –≤—ã—à–µ)",
                reply_markup=kb.get_callback_btns(
                    btns={'–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑': 'pay_forecast'}
                )
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)


payments_router = Router()


@payments_router.callback_query(F.data == 'pay_forecast')
async def send_invoice_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="üîÆ –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø",
        description=f"–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç ‚Äî –∏ —É –Ω–∏—Ö –µ—Å—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è",
        payload='invoice_personal_forecast',
        provider_token="",
        currency='XTR',
        prices=[LabeledPrice(label="XTR", amount=bot.price)],
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ {bot.price} ‚≠êÔ∏è", pay=True)]
            ]
        )
    )

@payments_router.pre_checkout_query(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@payments_router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext, bot: Bot):
    user_id = message.chat.id

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–∫ –∏–∑ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        data = await state.get_data()
        zodiac_sign = data.get("zodiac_sign")
        user_data = load_user_data().get(str(user_id))
        zodiac_sign = user_data.get("zodiac_sign") if user_data else None
    except Exception:
        await bot.send_message(
            1054042861,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
        )
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")
        return

    # –ï—Å–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not zodiac_sign:
        await bot.send_message(
            1054042861,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
        )
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    try:
        file = bot.file_system.get_file(zodiac_sign, kind="detailed")
        if not file:
            raise ValueError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}")

        await bot.send_document(chat_id=user_id, document=file, protect_content=True)
        await message.answer(
            text=(
                "‚ú® –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                "–¢–≤–æ–π <b>–ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø</b> –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –≤—ã—à–µ.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –ø–æ—Å–ª–∞–Ω–∏–µ–º –æ—Ç –∑–≤—ë–∑–¥ üåå"
            )
        )
    except Exception as e:
        await bot.send_message(
            1054042861,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({zodiac_sign}).\n–û—à–∏–±–∫–∞: {e}"
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")





# async def logging_successful_payment(message: Message, state: FSMContext, is_real=True) -> None:
#     state_data = await state.get_data()
#     zodiac_sign = state_data['zodiac_sign']
#
#     log_payment_data = {
#         'datetime': datetime.now().strftime('%Y-%m-%d_%H-%M-%S'),
#         'user': {
#             'user_id': message.from_user.id,
#             'username': message.from_user.username,
#             'first_name': message.from_user.first_name,
#             'last_name': message.from_user.last_name
#         },
#         'zodiac_sign': zodiac_sign
#     }
#
#     if is_real:
#         log_payment_data['payment_data']: {
#             'currency': message.successful_payment.currency,
#             'amount': message.successful_payment.total_amount // 100,
#             'invoice': message.successful_payment.invoice_payload,
#             'telegram payment id': message.successful_payment.telegram_payment_charge_id,
#             'provider payment in': message.successful_payment.provider_payment_charge_id,
#             'shipping option': message.successful_payment.shipping_option_id,
#             'order_info': message.successful_payment.order_info
#         }
#
#     payment_loger.log(15, json.dumps(log_payment_data, ensure_ascii=False))
