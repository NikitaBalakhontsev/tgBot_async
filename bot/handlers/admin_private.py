import asyncio
import os
import re

from aiogram import F, Router, Bot
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.formatting import as_marked_section

import bot.keyboards as kb
from bot.filters import ChatTypeFilter, IsAdmin
from bot.config import ZODIAC_BTNS, ZODIAC_SIGNS
from bot.utils.forecast import send_daily_forecasts, update_scheduler_time

"""
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ bot.admin_list –≤ —Ñ–æ—Ä–º–∞—Ç–µ user_id
"""
admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class Admin(StatesGroup):
    start = State()
    zodiac_sign = State()
    both_file_options = State()
    file_options = State()
    upload_file = State()

    price_options = State()
    request_price = State()

    broadcast_menu = State()
    broadcast_edit_time = State()

    path = None


# –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(Command("admin"))
async def admin_cmd(message: Message, state: FSMContext):
    await message.answer(text="–ó–∞–ø—É—â–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.get_reply_btns(
        "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã",
        "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤",
        "–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–æ–π",
        "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",
        "–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        placeholder="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        sizes=(2, 1, 1, 1)
    ))
    await state.set_state(Admin.start)



# –í—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
@admin_router.message(StateFilter("*"), F.text.casefold() == "–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã")
async def display_zodiac_signs(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Admin.zodiac_sign)
    zodiac_btns = ZODIAC_BTNS.copy()
    zodiac_btns['–ù–∞–∑–∞–¥'] = 'back_btn'
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=kb.get_callback_btns(btns=zodiac_btns))


@admin_router.callback_query(StateFilter(Admin.zodiac_sign), F.data.in_(ZODIAC_BTNS.values()))
async def select_zodiac_sign(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.delete()
    zodiac_sign = callback.data
    await state.update_data(zodiac_sign=zodiac_sign)
    await display_both_file_options_msg(callback.message, bot, state)


async def display_both_file_options_msg(message: Message, bot: Bot, state: FSMContext):
    state_data = await state.get_data()
    zodiac_sign = state_data.get("zodiac_sign")

    if not zodiac_sign:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.")
        return

    def format_file_info(kind_label, kind):
        path = bot.file_system.get_path(zodiac_sign, kind=kind)
        filename = path.split(os.sep)[-1] if path else "‚Äî"
        raw_date = bot.file_system.get_upload_date(zodiac_sign, kind=kind)
        date = raw_date if raw_date else "‚Äî"
        return f"<b>{kind_label} –≥–æ—Ä–æ—Å–∫–æ–ø</b>\n–§–∞–π–ª: <code>{filename}</code>\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {date}"

    text = f"[{zodiac_sign}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:\n\n" + "\n\n".join([
        format_file_info("–û–±—ã—á–Ω—ã–π", "general"),
        format_file_info("–ü–æ–¥—Ä–æ–±–Ω—ã–π", "detailed")
    ])

    gen_exists = bot.file_system.get_path(zodiac_sign, kind="general") is not None
    det_exists = bot.file_system.get_path(zodiac_sign, kind="detailed") is not None

    buttons = {
        "–û–±—ã—á–Ω—ã–π: –∑–∞–º–µ–Ω–∏—Ç—å": "upload_general",
        "–ü–æ–¥—Ä–æ–±–Ω—ã–π: –∑–∞–º–µ–Ω–∏—Ç—å": "upload_detailed",
        ("–û–±—ã—á–Ω—ã–π: —Å–∫–∞—á–∞—Ç—å" if gen_exists else "‚ÄÉ"): "download_general",
        ("–ü–æ–¥—Ä–æ–±–Ω—ã–π: —Å–∫–∞—á–∞—Ç—å" if det_exists else "‚ÄÉ"): "download_detailed",
        "–ù–∞–∑–∞–¥": "back_btn"
    }

    await state.set_state(Admin.both_file_options)
    await message.answer(
        text=text,
        reply_markup=kb.get_callback_btns(btns=buttons, sizes=(2, 2, 1)),
        parse_mode="HTML"
    )


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É
@admin_router.callback_query(StateFilter(Admin.both_file_options), F.data.startswith("upload_"))
async def request_file_upload(callback: CallbackQuery, state: FSMContext):
    kind = callback.data.split("_")[1]
    state_data = await state.get_data()
    zodiac_sign = state_data['zodiac_sign']
    await state.set_state(Admin.upload_file)
    await state.update_data(kind=kind)

    await callback.message.edit_text(
        text=f"[{zodiac_sign}] –ó–∞–º–µ–Ω–∏—Ç—å <b>{kind}</b> —Ñ–∞–π–ª.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:",
        reply_markup=kb.get_callback_btns(btns={"–ù–∞–∑–∞–¥": "back_btn"})
    )
    await callback.answer()


# –ù–∞–∑–∞–¥ —Å —ç—Ç–∞–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@admin_router.callback_query(StateFilter(Admin.upload_file), F.data == "back_btn")
async def cancel_upload_and_back(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.delete()
    await display_both_file_options_msg(callback.message, bot, state)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@admin_router.message(StateFilter(Admin.upload_file), F.document)
async def handle_upload(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        zodiac_sign = data['zodiac_sign']
        kind = data['kind']
        await bot.file_system.add_file(sign=zodiac_sign, file_id=message.document.file_id, kind=kind)
        await message.answer(f"–§–∞–π–ª '{kind}' –¥–ª—è {zodiac_sign} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await display_both_file_options_msg(message, bot, state)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
@admin_router.callback_query(StateFilter(Admin.both_file_options), F.data.startswith("download_"))
async def handle_download(callback: CallbackQuery, state: FSMContext, bot: Bot):
    kind = callback.data.split("_")[1]
    data = await state.get_data()
    zodiac_sign = data['zodiac_sign']
    file = bot.file_system.get_file(zodiac_sign, kind=kind)

    await callback.message.delete()
    await bot.send_document(chat_id=callback.message.chat.id, document=file)
    await display_both_file_options_msg(callback.message, bot, state)
    await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–Ω–∞–∫–æ–≤
@admin_router.callback_query(StateFilter(Admin.both_file_options), F.data == 'back_btn')
async def back_from_files(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.zodiac_sign)
    zodiac_btns = ZODIAC_BTNS.copy()
    zodiac_btns['–ù–∞–∑–∞–¥'] = 'back_btn'
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=kb.get_callback_btns(btns=zodiac_btns))
    await callback.answer()


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(StateFilter(Admin.zodiac_sign), F.data == 'back_btn')
async def back_from_zodiac_signs(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.start)
    await callback.message.delete()
    await callback.answer()


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
@admin_router.message(StateFilter("*"), F.text.casefold() == "—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
async def list_all_files(message: Message, bot: Bot, state: FSMContext):
    lines = ["<b>üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞:</b>"]
    for sign in ZODIAC_SIGNS:
        def short(p): return p.split(os.sep)[-1] if p else "‚Äî"
        gen_path = short(bot.file_system.get_path(sign, kind="general"))
        gen_date = bot.file_system.get_upload_date(sign, kind="general") or "‚Äî"
        det_path = short(bot.file_system.get_path(sign, kind="detailed"))
        det_date = bot.file_system.get_upload_date(sign, kind="detailed") or "‚Äî"
        lines.append(f"\n<b>{sign}</b>\n–û–±—ã—á–Ω—ã–π: {gen_path} ({gen_date})\n–ü–æ–¥—Ä–æ–±–Ω—ã–π: {det_path} ({det_date})")

    await message.answer("\n".join(lines), parse_mode="HTML")



"""
–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã
–î–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –µ–¥–∏–Ω–∞—è —Ü–µ–Ω–∞
–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""
@admin_router.message(StateFilter("*"), F.text.casefold() == "–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def display_price_options(message: Message, bot: Bot, state: FSMContext):
    current_price = bot.price

    await state.clear()
    await state.set_state(Admin.price_options)
    await message.answer(text=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>[{current_price} ‚≠êÔ∏è]</b>",
                         reply_markup=kb.get_callback_btns(btns={
                             '–ó–∞–º–µ–Ω–∏—Ç—å': 'change_price',
                             '–ù–∞–∑–∞–¥': 'back_btn'
                         }))

"""
–†–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∞–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""
# –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
@admin_router.message(StateFilter("*"), F.text.casefold() == "—É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–æ–π")
async def show_broadcast_menu_entry(message: Message, state: FSMContext, bot: Bot):
    await state.set_state(Admin.broadcast_menu)
    await send_scheduler_status(message=message, bot=bot)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (edit/reply –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç context)
async def send_scheduler_status(message: Message, bot: Bot, edit=False):
    job = bot.scheduler.get_job("daily_forecast_job")
    is_active = job is not None and job.next_run_time is not None

    text = (
        "<b>üì¨ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if is_active else '‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
        f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time.strftime('%H:%M %d.%m') if is_active else '‚Äì'}"
    )
    buttons = {
        "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è": "edit_time",
        ("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_active else "–ó–∞–ø—É—Å—Ç–∏—Ç—å"): ("pause" if is_active else "resume"),
        "–ù–∞–∑–∞–¥": "back_btn"
    }

    if edit:
        await message.edit_text(text=text, reply_markup=kb.get_callback_btns(btns=buttons))
    else:
        await message.answer(text=text, reply_markup=kb.get_callback_btns(btns=buttons))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ pause/resume –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@admin_router.callback_query(StateFilter(Admin.broadcast_menu), F.data.in_(["pause", "resume"]))
async def toggle_scheduler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    job = bot.scheduler.get_job("daily_forecast_job")

    if callback.data == "pause" and job:
        job.pause()
        await callback.answer("‚õîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    elif callback.data == "resume" and job:
        job.resume()
        await callback.answer("‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    else:
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    await send_scheduler_status(message=callback.message, bot=bot, edit=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"
@admin_router.callback_query(StateFilter(Admin.broadcast_menu), F.data == "edit_time")
async def ask_new_time(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.broadcast_edit_time)
    await callback.answer()
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>10:30</code>",
        reply_markup=kb.get_callback_btns(btns={"–ù–∞–∑–∞–¥": "back_btn"})
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@admin_router.message(StateFilter(Admin.broadcast_edit_time))
async def set_new_time(message: Message, bot: Bot, state: FSMContext):
    import re

    time_pattern = re.fullmatch(r"(\d{1,2}):(\d{2})", message.text.strip())
    if not time_pattern:
        await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ <b>–ß–ß:–ú–ú</b>")
        return

    hour, minute = map(int, time_pattern.groups())
    if not (0 <= hour < 24 and 0 <= minute < 60):
        await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã 0‚Äì23, –º–∏–Ω—É—Ç—ã 0‚Äì59.")
        return

    update_scheduler_time(bot.scheduler, hour, minute)
    await state.set_state(Admin.broadcast_menu)

    # –í–º–µ—Å—Ç–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏ –º–µ–Ω—è–µ–º
    last = await message.answer(f"‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{hour:02}:{minute:02}</b>")
    await asyncio.sleep(2.5)
    await last.delete()
    await send_scheduler_status(message=message, bot=bot, edit=False)


"""
–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–∞–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ Admin –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start
"""
@admin_router.message(StateFilter("*"), F.text.casefold() == "–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def close_admin_panel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞', reply_markup=ReplyKeyboardRemove())






""" [change price] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º '–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã' """
"""
–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∂–∏–¥–∞–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
"""
@admin_router.callback_query(StateFilter(Admin.price_options), F.data == 'change_price')
async def request_price(callback: CallbackQuery, bot: Bot, state: FSMContext):
    current_price = bot.price

    await state.set_state(Admin.request_price)
    await callback.answer('')
    await callback.message.edit_text(text=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>[{current_price} ‚≠êÔ∏è]</b> \n\n"
                                          f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ –∑–≤–µ–∑–¥–∞—Ö)",
                                     reply_markup=kb.get_callback_btns(btns={
        '–ù–∞–∑–∞–¥': 'back_btn'
    }))


""" 
–û–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –≤ bot.price
"""
@admin_router.message(StateFilter(Admin.request_price))
async def change_price(message: Message, bot: Bot, state: FSMContext):
    try:
        new_price = int(message.text)
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        #telegram –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        bot.price = new_price

        await state.clear()
        await state.set_state(Admin.start)
        await message.answer(text=f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bot.price} ‚≠êÔ∏è")

    except ValueError as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")




""" –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∑–≤–µ–∑–¥—ã —Ç–≥ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ """
@admin_router.message(Command('back'))
async def refund(message: Message, bot: Bot, command:CommandObject):
    await bot.refund_star_payment(user_id=message.chat.id, telegram_payment_charge_id=command.args)





""" [Back_button] –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""

""" –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ """




""" –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π "–≤—ã–±–æ—Ä —Ü–µ–Ω—ã" –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π """
@admin_router.callback_query(StateFilter(Admin.price_options, Admin.request_price), F.data == 'back_btn')
async def back_step_change_price(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    current_price = bot.price
    await state.clear()
    await state.set_state(Admin.start)
    await callback.answer(text='')
    await callback.message.edit_text(text=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>[{current_price}]</b>")


@admin_router.callback_query(StateFilter(Admin.broadcast_menu), F.data == "back_btn")
async def back_from_broadcast(callback: CallbackQuery, state: FSMContext):
    await admin_cmd(callback.message, state)
    await callback.answer()


@admin_router.callback_query(StateFilter(Admin.broadcast_edit_time), F.data == "back_btn")
async def back_to_broadcast_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(Admin.broadcast_menu)
    await callback.answer()
    await send_scheduler_status(message=callback.message, bot=bot, edit=True)

